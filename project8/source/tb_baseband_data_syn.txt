`timescale 1ns / 1ps


module tb_baseband_data;

    // Inputs
    reg data_clk;
    reg rst_n;
    reg data_in;
    reg enable;
    reg i_q_data_fifo_full;

    // Outputs
    wire [3:0] i_data;
    wire [3:0] q_data;
    wire new_symbol;
    wire mapping;

    // Instantiate the DUT
    baseband_data uut (
        .data_clk(data_clk),
        .rst_n(rst_n),
        .data_in(data_in),
        .enable(enable),
        .i_q_data_fifo_full(i_q_data_fifo_full),
        .i_data(i_data),
        .q_data(q_data),
        .new_symbol(new_symbol),
        .mapping(mapping)
    );

    // Clock Generation
    initial begin
        data_clk = 0;
        forever #5 data_clk = ~data_clk; // 100 MHz clock
    end

// initial block for SDF back annotation
    initial begin
      $sdf_annotate("../../synthesis/netlists/baseband_data_syn.sdf",tb_baseband_data_syn.dut1, ,"back_annotate.log");
    end

    // Display Signals
    initial begin
        $display("Time | data_in | mapping | new_symbol | i_data | q_data");
        $monitor("%4t  |    %b    |    %b     |     %b     |  %h    |  %h",
                 $time, data_in, mapping, new_symbol, i_data, q_data);
    end

    // Stimulus
    initial begin
        // Initial reset and idle state
        rst_n = 0;
        data_in = 0;
        enable = 0;
        i_q_data_fifo_full = 0;
        #20;
        rst_n = 1;
        enable = 1;

        // Send valid header: 12'b101100111000
        $display("Sending valid header");
        send_bits(12'b101100111000);

        // Send 10 symbols (60 bits total, 6 bits each)
        $display("Sending payload bits (10 symbols)");
        repeat(10) send_bits($random);

        #100;
        $display("Simulation complete.");
        $finish;
    end

    // Task: Send bits MSB first
    task send_bits(input [11:0] bits);
        integer i;
        begin
            for (i = 11; i >= 0; i = i - 1) begin
                data_in = bits[i];
                @(posedge data_clk);
            end
        end
    endtask
initial begin
  $dumpfile("waveform.vcd");
  $dumpvars(0,tb_baseband_data);
end
endmodule


